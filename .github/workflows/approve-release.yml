name: Approve release

on:
  release:
    types: [released]

env:
  VERSION: ${{ github.ref_name }}
  PROD_URL: https://zwirner.dev

jobs:
  approve_release:
    name: Approve release
    runs-on: ubuntu-latest

    permissions:
      contents: read
      deployments: write

    steps:
      - name: Check out `${{ env.VERSION }}` tag
        uses: actions/checkout@v4

      - name: Create GitHub deployment
        uses: bobheadxi/deployments@v1
        id: create_deployment
        with:
          step: start
          env: Production â€“ web-prod
          desc: Promoting release candidate to production

      - name: Compose release candidate domain name
        id: release_candidate_domain_name
        uses: ./.github/actions/release-candidate-domain-name
        with:
          version: ${{ env.VERSION }}

      - name: Promote release candidate to production
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROD_PROJECT_ID }}
        run: |
          vercel promote ${{ steps.release_candidate_domain_name.outputs.value }} \
            --yes \
            --token ${{ secrets.VERCEL_RELEASER_TOKEN }} \
            --scope ${{ secrets.VERCEL_TEAM_ID }}

      - name: Finalize GitHub deployment
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          env: ${{ steps.create_deployment.outputs.env }}
          deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
          status: ${{ job.status }}
          auto_inactive: true
          env_url: ${{ env.PROD_URL }}

      - name: Deactivate release candidate GitHub deployment
        uses: bobheadxi/deployments@v1
        if: success()
        with:
          step: deactivate-env
          env: Preview - web-prod
          desc: Promoted release candidate to production

  notify_on_success:
    name: Notify in Slack about new release
    runs-on: ubuntu-latest
    needs: approve_release

    env:
      MESSAGE_BUILDER: .github/workflows/slack-message-builders/approve-release/release-live.ts

    steps:
      - name: Check out message builder
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ env.MESSAGE_BUILDER }}
          sparse-checkout-cone-mode: false

      - name: Build message
        id: message
        env:
          GH_RELEASE_URL: ${{ github.event.release.html_url }}
        run: |
          npm i --save-dev @types/node && npm i commander
          MESSAGE=$(npx ts-node $MESSAGE_BUILDER --releaseVersion $VERSION \
            --deploymentUrl $PROD_URL --ghReleaseUrl $GH_RELEASE_URL)
          echo "value=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Send message
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.RELEASE_WATCHER_BOT_TOKEN }}
        with:
          channel-id: ${{ secrets.RELEASES_CHANNEL_ID }}
          payload: ${{ steps.message.outputs.value }}

  notify_on_failure:
    name: Notify in Slack about failure to promote release candidate
    runs-on: ubuntu-latest
    needs: approve_release
    if: failure()

    env:
      MESSAGE_BUILDER: .github/workflows/slack-message-builders/approve-release/rc-promotion-failed.ts

    steps:
      - name: Check out message builder
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ env.MESSAGE_BUILDER }}
          sparse-checkout-cone-mode: false

      - name: Build message
        id: message
        env:
          RUN_DETAILS: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          npm i --save-dev @types/node && npm i commander
          MESSAGE=$(npx ts-node $MESSAGE_BUILDER --releaseVersion $VERSION --failedRunDetails $RUN_DETAILS)
          echo "value=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Send message
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.RELEASE_WATCHER_BOT_TOKEN }}
        with:
          channel-id: ${{ secrets.RELEASE_CANDIDATES_CHANNEL_ID }}
          payload: ${{ steps.message.outputs.value }}
