name: Initiate release
on:
  workflow_dispatch: { }
  schedule:
    - cron: '0 15 * * 1' # Every Monday at 15:00 UTC.

jobs:
  create_release_candidate:
    name: Create release candidate
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      version: ${{ steps.new_version.outputs.value }}
      url: ${{ steps.pre_release.outputs.url }}

    steps:
      - name: Workflow must be dispatched from `main`
        if: github.event_name == 'workflow_dispatch' && !contains(github.ref,'refs/heads/main')
        run:
          echo '::error title=Wrong branch::Releases must be created on the main branch.'
          exit 1

      - name: Check out `main`
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Compose new calendar version
        id: new_version
        run: |
          # Current date and time in the "YYYY.0M.0D.0H" format.
            VERSION=$(date +"%Y.%m.%d.%H")
          echo "value=$VERSION" >> $GITHUB_OUTPUT

      - name: Tag last commit with ${{ steps.new_version.outputs.value }}
        env:
          VERSION: ${{ steps.new_version.outputs.value }}
        run: |
          git tag $VERSION && git push origin $VERSION

      - name: Create GitHub pre-release
        uses: softprops/action-gh-release@v1
        id: pre_release
        with:
          tag_name: ${{ steps.new_version.outputs.value }}
          prerelease: true
          generate_release_notes: true

  deploy_release_candidate:
    name: Deploy release candidate
    runs-on: ubuntu-latest
    needs: create_release_candidate

    permissions:
      contents: read
      deployments: write

    env:
      VERSION: ${{ needs.create_release_candidate.outputs.version }}

    outputs:
      url: ${{ steps.deploy_preview.outputs.preview-url }}

    steps:
      - name: Check out `${{ env.VERSION }}` tag
        uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}

      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v1
        id: create_deployment
        with:
          step: start
          env: Preview â€“ web-prod
          desc: Deploying as preview in `web-prod`

      - name: Compose release candidate domain name
        id: release_candidate_domain_name
        uses: ./.github/actions/release-candidate-domain-name
        with:
          version: ${{ env.VERSION }}

      - name: Deploy `web-prod` preview
        id: deploy_preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_RELEASER_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          scope: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROD_PROJECT_ID }}
          alias-domains: ${{ steps.release_candidate_domain_name.outputs.value }}

      - name: Finalize GitHub deployment
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          env: ${{ steps.create_deployment.outputs.env }}
          deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
          status: ${{ job.status }}
          auto_inactive: true
          env_url: ${{ steps.deploy_preview.outputs.preview-url }}

  notify_on_success:
    name: Notify in Slack about new release candidate
    runs-on: ubuntu-latest
    needs: [create_release_candidate, deploy_release_candidate]

    env:
      VERSION: ${{ needs.create_release_candidate.outputs.version }}
      MESSAGE_BUILDER: .github/workflows/slack-message-builders/initiate-release/rc-arrived.ts
      GH_RELEASE_URL: ${{ needs.create_release_candidate.outputs.url }}

    steps:
      - name: Check out message builder
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ env.MESSAGE_BUILDER }}
          sparse-checkout-cone-mode: false
          ref: ${{ env.VERSION }}

      - name: Create promote to production URL
        id: promote_url
        run: |
          EDIT_RELEASE_URL=${GH_RELEASE_URL/tag/edit}
          echo "value=$EDIT_RELEASE_URL" >> $GITHUB_OUTPUT

      - name: Build message
        id: message
        env:
          DEPLOYMENT_URL: ${{ needs.deploy_release_candidate.outputs.url }}
          PROMOTE_URL: ${{ steps.promote_url.outputs.value }}
        run: |
          npm i --save-dev @types/node && npm i commander
          MESSAGE=$(npx ts-node $MESSAGE_BUILDER --releaseVersion $VERSION \
            --deploymentUrl $DEPLOYMENT_URL --ghReleaseUrl $GH_RELEASE_URL \
            --promoteUrl $PROMOTE_URL) 
          echo "value=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Send message
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.RELEASE_WATCHER_BOT_TOKEN }}
        with:
          channel-id: ${{ secrets.RELEASE_CANDIDATES_CHANNEL_ID }}
          payload: ${{ steps.message.outputs.value }}

  notify_on_failure:
    name: Notify in Slack about failure to deploy release candidate
    runs-on: ubuntu-latest
    needs: [create_release_candidate, deploy_release_candidate]
    if: failure()

    env:
      VERSION: ${{ needs.create_release_candidate.outputs.version }}
      MESSAGE_BUILDER: .github/workflows/slack-message-builders/initiate-release/rc-deployment-failed.ts

    steps:
      - name: Check out message builder
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ env.MESSAGE_BUILDER }}
          sparse-checkout-cone-mode: false
          ref: ${{ env.VERSION }}

      - name: Build message
        id: message
        env:
          RUN_DETAILS: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          npm i --save-dev @types/node && npm i commander
          MESSAGE=$(npx ts-node $MESSAGE_BUILDER --releaseVersion $VERSION --failedRunDetails $RUN_DETAILS)
          echo "value=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Send message
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.RELEASE_WATCHER_BOT_TOKEN }}
        with:
          channel-id: ${{ secrets.RELEASE_CANDIDATES_CHANNEL_ID }}
          payload: ${{ steps.message.outputs.value }}
